{"ast":null,"code":"export const getResult = async path => {\n  let myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n  let requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  try {\n    let res = await fetch(path, requestOptions);\n    return res.json();\n  } catch (err) {\n    console.log('error', err);\n  }\n};\nexport const loginUser = async (username, password) => {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n  var raw = JSON.stringify({\n    \"username\": username,\n    \"password\": password\n  });\n  var requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow'\n  };\n  let response = await fetch(\"http://localhost:8000/malwaredetection/login\", requestOptions);\n  let pp = await response.json();\n  console.log(pp);\n};\nexport const postResult = async (hash, cont, link, percent) => {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n  var raw = JSON.stringify({\n    \"hash\": hash,\n    \"contribution\": cont,\n    \"link\": link,\n    \"percent\": percent\n  });\n  var requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow'\n  };\n  fetch(\"http://localhost:8000/malwaredetection/new\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n};\nexport const putResult = async (hash, obj) => {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n  var raw = JSON.stringify(obj);\n  var requestOptions = {\n    method: 'PUT',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow'\n  };\n  fetch(`http://localhost:8000/malwaredetection/update/${hash}`, requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n};","map":{"version":3,"sources":["/Users/chandrashekarvt/Desktop/final-year-project/Malware-Detection-july-13/utils.ts"],"names":["getResult","path","myHeaders","Headers","append","requestOptions","method","headers","redirect","res","fetch","json","err","console","log","loginUser","username","password","raw","JSON","stringify","body","response","pp","postResult","hash","cont","link","percent","then","text","result","catch","error","putResult","obj"],"mappings":"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","sourcesContent":["\n\nexport const getResult = async (path: string) => {\n    let myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n\n    let requestOptions: RequestInit = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n    try {\n        let res = await fetch(path, requestOptions);\n        return res.json()\n    } catch (err) {\n        console.log('error', err)\n    }\n}\n\nexport const loginUser = async (username: string, password: string) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n\n    var raw = JSON.stringify({ \"username\": username, \"password\": password });\n\n    var requestOptions: RequestInit = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    let response = await fetch(\"http://localhost:8000/malwaredetection/login\", requestOptions)\n\n    let pp = await response.json()\n    console.log(pp)\n}\n\nexport const postResult = async (hash: string, cont: number, link: string, percent: number) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n\n    var raw = JSON.stringify({ \"hash\": hash, \"contribution\": cont, \"link\": link, \"percent\": percent });\n\n    var requestOptions: RequestInit = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    fetch(\"http://localhost:8000/malwaredetection/new\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n}\n\n\nexport const putResult = async (hash: string, obj: any) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n\n    var raw = JSON.stringify(obj);\n\n    var requestOptions: RequestInit = {\n        method: 'PUT',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    fetch(`http://localhost:8000/malwaredetection/update/${hash}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n}\n"]},"metadata":{},"sourceType":"module"}