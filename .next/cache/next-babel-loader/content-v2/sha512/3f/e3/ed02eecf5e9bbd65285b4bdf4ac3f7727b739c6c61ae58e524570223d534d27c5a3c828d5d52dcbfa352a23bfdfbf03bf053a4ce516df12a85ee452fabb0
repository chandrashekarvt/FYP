{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/chandrashekarvt/Desktop/final-year-project/Malware-Detection-july-13/pages/campaigns/test/show.js\";\nimport React, { Component } from 'react';\nimport { Card, Grid, Button, Divider, Icon, Header, Segment } from 'semantic-ui-react';\nimport Layout from '../../../components/Layout';\nimport Campaign from '../../../ethereum/testingNode';\nimport factory from '../../../ethereum/factory';\nimport web3 from '../../../ethereum/web3';\nimport ApproveForm from '../../../components/ApproveForm';\nimport PercentGetForm from '../../../components/PercentGetForm';\nimport AnalyseForm from '../../../components/AnalyseForm';\nimport GetFileForm from '../../../components/GetFileFormMalware';\nimport DownloadForm from '../../../components/DownloadForm';\nimport ByteForm from '../../../components/ByteForm';\nimport MalwaresForm from '../../../components/MalwaresForm';\nimport { Link } from '../../../routes';\nimport { getResult } from '../../../utils';\n\nclass CampaignShow extends Component {\n  static async getInitialProps(props) {\n    // const campaign = Campaign(props.query.address);\n    // const campaigns = await factory.methods.getDeployedMalwares().call();\n    // const summary = await campaign.methods.trustValue().call();\n    // const myaddress = await campaign.methods.nodeAddress().call();\n    const res = await getResult(`http://localhost:8000/malwaredetection/get/${props.query.address}`);\n    let campaigns = await getResult('http://localhost:8000/malwaredetection/');\n    const {\n      contribution\n    } = res;\n    return {\n      obj: res,\n      address: props.query.address,\n      trustValue: contribution,\n      myAddress: '0xefCFCc404B71eB723100D02f9c9dfC71C197e265',\n      campaignsNew: campaigns.malwares\n    };\n  } // renderCampaigns() {\n  //   const items = this.props.campaignsNew.map(({ hash: address }) => {\n  //     return {\n  //       header: address,\n  //       description: (\n  //         <Link route={`/campaigns/${address}`}>\n  //           <a>View Malware</a>\n  //         </Link>\n  //       ),\n  //       fluid: true\n  //     };\n  //   });\n  //   return <Card.Group items={items} />;\n  // }\n\n\n  renderCards() {\n    const {\n      address,\n      trustValue,\n      myAddress\n    } = this.props;\n    const items = [{\n      header: address,\n      meta: 'Address of Test Node',\n      description: '',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }, {\n      header: trustValue,\n      meta: 'Trust Value',\n      description: 'Trust Value of Node which changes based on action'\n    }, {\n      header: myAddress,\n      meta: 'My address',\n      description: '',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }];\n    return /*#__PURE__*/_jsxDEV(Card.Group, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h3\",\n        children: [/*#__PURE__*/_jsxDEV(Icon, {\n          name: \"user\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), \"Details\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: this.renderCards()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Segment.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Segment.Group, {\n            horizontal: true,\n            children: /*#__PURE__*/_jsxDEV(Segment, {\n              children: [/*#__PURE__*/_jsxDEV(Header, {\n                as: \"h3\",\n                children: [/*#__PURE__*/_jsxDEV(Icon, {\n                  name: \"percent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 21\n                }, this), \"Report\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                children: /*#__PURE__*/_jsxDEV(ApproveForm, {\n                  address: this.props.obj\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Segment, {\n            children: [/*#__PURE__*/_jsxDEV(Header, {\n              as: \"h3\",\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                name: \"file alternate outline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 25\n              }, this), \"Get File Url\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n              children: /*#__PURE__*/_jsxDEV(GetFileForm, {\n                address: this.props.address\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Segment.Group, {\n            horizontal: true,\n            children: [/*#__PURE__*/_jsxDEV(Segment, {\n              children: [/*#__PURE__*/_jsxDEV(Header, {\n                as: \"h3\",\n                children: [/*#__PURE__*/_jsxDEV(Icon, {\n                  name: \"file alternate outline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 33\n                }, this), \"Analysing Files\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                children: /*#__PURE__*/_jsxDEV(AnalyseForm, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Segment, {\n              children: [/*#__PURE__*/_jsxDEV(Header, {\n                as: \"h3\",\n                children: [/*#__PURE__*/_jsxDEV(Icon, {\n                  name: \"download\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 25\n                }, this), \"Download File\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                children: /*#__PURE__*/_jsxDEV(DownloadForm, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CampaignShow;","map":{"version":3,"sources":["/Users/chandrashekarvt/Desktop/final-year-project/Malware-Detection-july-13/pages/campaigns/test/show.js"],"names":["React","Component","Card","Grid","Button","Divider","Icon","Header","Segment","Layout","Campaign","factory","web3","ApproveForm","PercentGetForm","AnalyseForm","GetFileForm","DownloadForm","ByteForm","MalwaresForm","Link","getResult","CampaignShow","getInitialProps","props","res","query","address","campaigns","contribution","obj","trustValue","myAddress","campaignsNew","malwares","renderCards","items","header","meta","description","style","overflowWrap","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Grid, Button,Divider,Icon,Header,Segment } from 'semantic-ui-react';\nimport Layout from '../../../components/Layout';\nimport Campaign from '../../../ethereum/testingNode';\nimport factory from '../../../ethereum/factory';\n\nimport web3 from '../../../ethereum/web3';\n\nimport ApproveForm from '../../../components/ApproveForm';\nimport PercentGetForm from '../../../components/PercentGetForm';\nimport AnalyseForm from '../../../components/AnalyseForm';\nimport GetFileForm from '../../../components/GetFileFormMalware';\nimport DownloadForm from '../../../components/DownloadForm';\nimport  ByteForm from '../../../components/ByteForm';\nimport MalwaresForm from '../../../components/MalwaresForm';\n\n\nimport { Link } from '../../../routes';\nimport { getResult } from '../../../utils';\n\nclass CampaignShow extends Component {\n  static async getInitialProps(props) {\n    // const campaign = Campaign(props.query.address);\n    // const campaigns = await factory.methods.getDeployedMalwares().call();\n\n    // const summary = await campaign.methods.trustValue().call();\n    // const myaddress = await campaign.methods.nodeAddress().call();\n    const res = await getResult(`http://localhost:8000/malwaredetection/get/${props.query.address}`);\n    let campaigns = await getResult('http://localhost:8000/malwaredetection/');\n\n    const { contribution } = res;\n    return {\n      obj: res,\n      address: props.query.address,\n      trustValue: contribution,\n      myAddress: '0xefCFCc404B71eB723100D02f9c9dfC71C197e265',\n      campaignsNew: campaigns.malwares\n\n    };\n  }\n\n\n  // renderCampaigns() {\n  //   const items = this.props.campaignsNew.map(({ hash: address }) => {\n  //     return {\n  //       header: address,\n  //       description: (\n  //         <Link route={`/campaigns/${address}`}>\n  //           <a>View Malware</a>\n  //         </Link>\n  //       ),\n  //       fluid: true\n  //     };\n  //   });\n\n  //   return <Card.Group items={items} />;\n  // }\n\n\n  renderCards() {\n    const {\n      address,\n      trustValue,\n      myAddress\n    } = this.props;\n\n    const items = [\n      {\n        header: address,\n        meta: 'Address of Test Node',\n        description:\n          '',\n        style: { overflowWrap: 'break-word' }\n      },\n      {\n        header: trustValue,\n        meta: 'Trust Value',\n        description:\n          'Trust Value of Node which changes based on action'\n      },\n      {\n        header: myAddress,\n        meta: 'My address',\n        description:\n          '',\n        style: { overflowWrap: 'break-word' }\n\n       }\n\n    ];\n\n    return <Card.Group items={items} />;\n  }\n\n  render() {\n    return (\n      <Layout>\n\n      <Header as='h3'>\n          <Icon name='user' />\n          Details\n      </Header>\n        <Grid>\n          <Grid.Row>\n            {this.renderCards()}\n          </Grid.Row>\n\n    <Segment.Group>\n\n        <Segment.Group horizontal>\n              {/* <Segment>\n\n          <Header as='h3'>\n              <Icon name=\"percent\"/>\n              Percentage Malware Reported\n          </Header>\n              <Grid.Row>\n                <PercentGetForm address={this.props.address} />\n              </Grid.Row>\n\n              </Segment>*/}\n\n              <Segment> \n\n            <Header as='h3'>\n                    <Icon name=\"percent\"/>\n                        Report\n            </Header>\n                    <Grid.Row>\n                  <ApproveForm address={this.props.obj} />\n                    </Grid.Row>\n\n\n            </Segment>\n        </Segment.Group>\n\n\n                    <Segment>\n\n                    <Header as='h3'>\n                        <Icon name='file alternate outline' />\n                        Get File Url\n                    </Header>\n                                <Grid.Row>\n                                    <GetFileForm address={this.props.address}/>\n                                </Grid.Row>\n\n                    </Segment>\n\n\n               <Segment.Group horizontal>\n                    <Segment>\n                            <Header as='h3'>\n                                <Icon name='file alternate outline' />\n                                Analysing Files\n                            </Header>\n\n                                    <Grid.Row>\n                                        <AnalyseForm />\n                                    </Grid.Row>\n\n                                    </Segment>\n                                <Segment>\n\n                    <Header as='h3'>\n                        <Icon name='download' />\n                        Download File\n                    </Header>\n\n                            <Grid.Row>\n                                <DownloadForm />\n                            </Grid.Row>\n\n                            </Segment>\n                     </Segment.Group>\n      \n      </Segment.Group>\n\n\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default CampaignShow;\n"]},"metadata":{},"sourceType":"module"}