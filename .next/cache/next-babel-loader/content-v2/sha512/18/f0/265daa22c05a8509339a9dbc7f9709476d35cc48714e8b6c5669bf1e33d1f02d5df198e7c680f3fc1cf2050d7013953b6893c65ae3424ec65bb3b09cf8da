{"ast":null,"code":"const {\n  Octokit\n} = require(\"@octokit/rest\");\n\nconst {\n  Base64\n} = require(\"js-base64\");\n\nconst fs = require(\"fs\");\n\nrequire(\"dotenv\").config();\n\nconst octokit = new Octokit({\n  auth: process.env.GITHUB_ACCESS_TOKEN\n}); //to upload file by providing just hash as we are naming the file with hash\n\nexport default (async (req, res) => {\n  console.log(\"Inside here!\");\n\n  try {\n    //set as header and send whatever the hash u r sending\n    const filePath = req.body.filepath;\n    const hash = req.body.hash;\n    const content = fs.readFileSync(filePath, \"utf-8\");\n    const contentEncoded = Base64.encode(content);\n    const {\n      data\n    } = await octokit.repos.createOrUpdateFileContents({\n      // replace the owner and email with your own details\n      owner: \"manjularachana\",\n      repo: \"githubApiUsageToUploadDownload\",\n      path: hash,\n      message: \"feat: Added OUTPUT.md programatically\",\n      content: contentEncoded\n    });\n    res.status(200).json({\n      data\n    });\n  } catch (err) {\n    console.error(err);\n  }\n});","map":{"version":3,"sources":["/Users/chandrashekarvt/Desktop/final-year-project/Malware-Detection-july-13/pages/api/uploadFile.tsx"],"names":["Octokit","require","Base64","fs","config","octokit","auth","process","env","GITHUB_ACCESS_TOKEN","req","res","console","log","filePath","body","filepath","hash","content","readFileSync","contentEncoded","encode","data","repos","createOrUpdateFileContents","owner","repo","path","message","status","json","err","error"],"mappings":"AACA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AAGAA,OAAO,CAAC,QAAD,CAAP,CAAkBG,MAAlB;;AAEA,MAAMC,OAAO,GAAG,IAAIL,OAAJ,CAAY;AAC1BM,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADQ,CAAZ,CAAhB,C,CAIA;;AACA,gBAAe,OAAOC,GAAP,EAA2BC,GAA3B,KAAkD;AAC/DC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACE,MAAI;AACA;AACA,UAAMC,QAAQ,GAAIJ,GAAG,CAACK,IAAJ,CAASC,QAA3B;AACA,UAAMC,IAAI,GAAGP,GAAG,CAACK,IAAJ,CAASE,IAAtB;AAGA,UAAMC,OAAO,GAAGf,EAAE,CAACgB,YAAH,CAAgBL,QAAhB,EAA0B,OAA1B,CAAhB;AACA,UAAMM,cAAc,GAAGlB,MAAM,CAACmB,MAAP,CAAcH,OAAd,CAAvB;AAEA,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMjB,OAAO,CAACkB,KAAR,CAAcC,0BAAd,CAAyC;AAC9D;AACAC,MAAAA,KAAK,EAAE,gBAFuD;AAG9DC,MAAAA,IAAI,EAAE,gCAHwD;AAI9DC,MAAAA,IAAI,EAAEV,IAJwD;AAK9DW,MAAAA,OAAO,EAAE,uCALqD;AAM9DV,MAAAA,OAAO,EAAEE;AANqD,KAAzC,CAAvB;AAQJT,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACR,MAAAA;AAAD,KAArB;AACG,GAlBH,CAkBI,OAAOS,GAAP,EAAY;AACZnB,IAAAA,OAAO,CAACoB,KAAR,CAAcD,GAAd;AACD;AACN,CAvBD","sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next'\nconst { Octokit } = require(\"@octokit/rest\")\nconst { Base64 } = require(\"js-base64\")\nconst fs = require(\"fs\")\n\n\nrequire(\"dotenv\").config()\n\nconst octokit = new Octokit({\n  auth: process.env.GITHUB_ACCESS_TOKEN,\n})\n\n//to upload file by providing just hash as we are naming the file with hash\nexport default async (req:NextApiRequest, res:NextApiResponse)=> {\n  console.log(\"Inside here!\")\n    try {\n        //set as header and send whatever the hash u r sending\n        const filePath  = req.body.filepath ;\n        const hash = req.body.hash;\n\n\n        const content = fs.readFileSync(filePath, \"utf-8\")\n        const contentEncoded = Base64.encode(content)\n\n        const { data } = await octokit.repos.createOrUpdateFileContents({\n          // replace the owner and email with your own details\n          owner: \"manjularachana\",\n          repo: \"githubApiUsageToUploadDownload\",\n          path: hash,\n          message: \"feat: Added OUTPUT.md programatically\",\n          content: contentEncoded,\n        })\n    res.status(200).json({data})\n      } catch (err) {\n        console.error(err)\n      }\n}\n"]},"metadata":{},"sourceType":"module"}