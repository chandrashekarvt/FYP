{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chandrashekarvt/Desktop/final-year-project/Malware-Detection-july-13/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chandrashekarvt/Desktop/final-year-project/Malware-Detection-july-13/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var getResult = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var myHeaders, requestOptions, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n            myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n            requestOptions = {\n              method: 'GET',\n              headers: myHeaders,\n              redirect: 'follow'\n            };\n            _context.prev = 4;\n            _context.next = 7;\n            return fetch(path, requestOptions);\n\n          case 7:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.json());\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](4);\n            console.log('error', _context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 11]]);\n  }));\n\n  return function getResult(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loginUser = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(username, password, is_tester, isRegister) {\n    var myHeaders, raw, requestOptions, response, pp;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n            myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n            raw = JSON.stringify({\n              \"username\": username,\n              \"password\": password\n            });\n            requestOptions = {\n              method: 'POST',\n              headers: myHeaders,\n              body: raw,\n              redirect: 'follow'\n            };\n\n            if (isRegister) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 8;\n            return fetch(\"http://localhost:8000/malwaredetection/login\", requestOptions);\n\n          case 8:\n            response = _context2.sent;\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.next = 13;\n            return fetch(\"http://localhost:8000/malwaredetection/login\", requestOptions);\n\n          case 13:\n            response = _context2.sent;\n\n          case 14:\n            _context2.next = 16;\n            return response.json();\n\n          case 16:\n            pp = _context2.sent;\n            return _context2.abrupt(\"return\", pp.message);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loginUser(_x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var postResult = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(hash, cont, link, percent) {\n    var myHeaders, raw, requestOptions;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n            myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n            raw = JSON.stringify({\n              \"hash\": hash,\n              \"contribution\": cont,\n              \"link\": link,\n              \"percent\": percent\n            });\n            requestOptions = {\n              method: 'POST',\n              headers: myHeaders,\n              body: raw,\n              redirect: 'follow'\n            };\n            fetch(\"http://localhost:8000/malwaredetection/new\", requestOptions).then(function (response) {\n              return response.text();\n            }).then(function (result) {\n              return console.log(result);\n            })[\"catch\"](function (error) {\n              return console.log('error', error);\n            });\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function postResult(_x6, _x7, _x8, _x9) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var putResult = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(hash, obj) {\n    var myHeaders, raw, requestOptions;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n            myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n            raw = JSON.stringify(obj);\n            requestOptions = {\n              method: 'PUT',\n              headers: myHeaders,\n              body: raw,\n              redirect: 'follow'\n            };\n            fetch(\"http://localhost:8000/malwaredetection/update/\".concat(hash), requestOptions).then(function (response) {\n              return response.text();\n            }).then(function (result) {\n              return console.log(result);\n            })[\"catch\"](function (error) {\n              return console.log('error', error);\n            });\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function putResult(_x10, _x11) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/chandrashekarvt/Desktop/final-year-project/Malware-Detection-july-13/utils.ts"],"names":["getResult","path","myHeaders","Headers","append","requestOptions","method","headers","redirect","fetch","res","json","console","log","loginUser","username","password","is_tester","isRegister","raw","JSON","stringify","body","response","pp","message","postResult","hash","cont","link","percent","then","text","result","error","putResult","obj"],"mappings":"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","sourcesContent":["\n\nexport const getResult = async (path: string) => {\n    let myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n\n    let requestOptions: RequestInit = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n    try {\n        let res = await fetch(path, requestOptions);\n        return res.json()\n    } catch (err) {\n        console.log('error', err)\n    }\n}\n\nexport const loginUser = async (username: string, password: string, is_tester: boolean, isRegister: boolean) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n\n    var raw = JSON.stringify({ \"username\": username, \"password\": password });\n\n    var requestOptions: RequestInit = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n\n    let response;\n\n    if (!isRegister) {\n\n        response = await fetch(\"http://localhost:8000/malwaredetection/login\", requestOptions)\n    } else {\n        response = await fetch(\"http://localhost:8000/malwaredetection/login\", requestOptions)\n\n    }\n\n    let pp = await response.json()\n    return pp.message\n}\n\nexport const postResult = async (hash: string, cont: number, link: string, percent: number) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n\n    var raw = JSON.stringify({ \"hash\": hash, \"contribution\": cont, \"link\": link, \"percent\": percent });\n\n    var requestOptions: RequestInit = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    fetch(\"http://localhost:8000/malwaredetection/new\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n}\n\n\nexport const putResult = async (hash: string, obj: any) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Cookie\", \"csrftoken=JXKpXceGmKoaL8yPyVgKXyF9Gu3KBe8H\");\n\n    var raw = JSON.stringify(obj);\n\n    var requestOptions: RequestInit = {\n        method: 'PUT',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    fetch(`http://localhost:8000/malwaredetection/update/${hash}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n}\n"]},"metadata":{},"sourceType":"module"}